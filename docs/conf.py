import os
import sys
import re
from sphinx.ext.apidoc import main as sphinx_apidoc
from benchmarkstt.api.jsonrpc import get_methods
from benchmarkstt.docblock import format_docs
from sphinxcontrib import autoclassdiag

# Configuration file for the Sphinx documentation builder.
# see the documentation: http://www.sphinx-doc.org/en/master/config

root_dir = os.path.dirname(os.path.dirname(os.path.realpath(__file__)))
src_dir = os.path.join(os.path.abspath(root_dir), 'src', 'benchmarkstt')
ext_dir = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'ext')
docs_modules_dir = os.path.join(os.path.abspath(root_dir), 'docs', 'modules')
tpl_dir = os.path.join(os.path.abspath(root_dir), 'docs', 'templates')

sys.path.insert(0, root_dir)
sys.path.insert(0, src_dir)
sys.path.insert(0, ext_dir)

#  from benchmarkstt.normalization import logger

# -- Auto build module docs --------------------------------------------------
sphinx_apidoc(['-e', '-f', '-t', tpl_dir, '-o', docs_modules_dir, src_dir])
os.remove(os.path.join(docs_modules_dir, 'modules.rst'))

# -- Auto build api docs -----------------------------------------------------
def cls_name(cls):
    if cls.__module__.startswith('benchmarkstt.'):
        return '.'.join([cls.__module__[13:], cls.__name__])
    return 'object'

autoclassdiag.__dict__["class_name"] = cls_name

with open(os.path.join(os.path.abspath(root_dir), 'docs', 'api-methods.rst'), 'w') as f:
    f.write("Available JSON-RPC methods\n==========================\n\n\n")
    f.write(".. attention::\n\n")
    f.write("    Only supported for Python versions 3.6 and above\n\n\n")

    methods = get_methods()
    for name, func in methods.items.items():
        f.write('\n%s\n%s\n' % (name, '-' * len(name)))
        f.write('\n')
        f.write(format_docs(func.__doc__))
        f.write('\n\n')

# -- Auto build UML diagrams -------------------------------------------------
import uml
uml_dir = os.path.join(os.path.dirname(os.path.realpath(__file__)), '_static', 'autogen')
uml.generate(src_dir, uml_dir)

extensions = [
    'sphinx.ext.autodoc',
    'sphinx.ext.doctest',
    'sphinx.ext.coverage',
    'sphinx.ext.viewcode',
    'sphinx.ext.githubpages',
    'sphinxarg.ext',
    'sphinxcontrib.gravizo',
    'sphinxcontrib.mermaid',
]

on_rtd = os.environ.get('READTHEDOCS', None) == 'True'

if not on_rtd:  # only import and set the theme if we're building docs locally
    import sphinx_rtd_theme

    html_theme = 'sphinx_rtd_theme'
    html_theme_path = [sphinx_rtd_theme.get_html_theme_path()]
else:
    html_theme = 'default'

# -- Project information -----------------------------------------------------

project = 'BenchmarkSTT'
copyright = '2019, EBU'
author = 'EBU'

# The short X.Y version

with open('../VERSION') as f:
    # The full version, including alpha/beta/rc tags
    release = f.read()

# The short X.Y version
version = re.sub(r'^([0-9]+\.[0-9]+).*$', r'\1', release)


# -- General configuration ---------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#
# needs_sphinx = '1.0'

# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

# The suffix(es) of source filenames.
# You can specify multiple suffix as a list of string:
#
# source_suffix = ['.rst', '.md']
source_suffix = '.rst'

# The master toctree document.
master_doc = 'index'

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = None

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This pattern also affects html_static_path and html_extra_path.
exclude_patterns = []

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = None


# -- Options for HTML output -------------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
#
# html_theme = 'sphinx_rtd_theme'

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#
# html_theme_options = {}

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ['_static']

html_css_files = [
    'theme_overrides.css',
]

# Custom sidebar templates, must be a dictionary that maps document names
# to template names.
#
# The default sidebars (for documents that don't match any pattern) are
# defined by theme itself.  Builtin themes are using these templates by
# default: ``['localtoc.html', 'relations.html', 'sourcelink.html',
# 'searchbox.html']``.
#
# html_sidebars = {}


# -- Options for HTMLHelp output ---------------------------------------------

# Output file base name for HTML help builder.
htmlhelp_basename = 'BenchmarkSTTdoc'


# -- Options for LaTeX output ------------------------------------------------

latex_elements = {
    # The paper size ('letterpaper' or 'a4paper').
    #
    # 'papersize': 'letterpaper',

    # The font size ('10pt', '11pt' or '12pt').
    #
    # 'pointsize': '10pt',

    # Additional stuff for the LaTeX preamble.
    #
    # 'preamble': '',

    # Latex figure (float) alignment
    #
    # 'figure_align': 'htbp',
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title,
#  author, documentclass [howto, manual, or own class]).
latex_documents = [
    (master_doc, 'BenchmarkSTT.tex', 'BenchmarkSTT Documentation',
     'EBU', 'manual'),
]


# -- Options for manual page output ------------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    ('cli', 'benchmarkstt', 'BenchmarkSTT Documentation',
     [author], 1)
]


# -- Options for Texinfo output ----------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
    (master_doc, 'BenchmarkSTT', 'BenchmarkSTT Documentation',
     author, 'BenchmarkSTT', 'One line description of project.',
     'Miscellaneous'),
]


# -- Options for Epub output -------------------------------------------------

# Bibliographic Dublin Core info.
epub_title = project

# The unique identifier of the text. This can be a ISBN number
# or the project homepage.
#
# epub_identifier = ''

# A unique identification for the text.
#
# epub_uid = ''

# A list of files that should not be packed into the epub file.
epub_exclude_files = ['search.html']

#
# # -- Extension configuration -------------------------------------------------


smartquotes = False
# smartquotes_action = 'q'
#
# smartquotes_excludes = {'builders': ['man', 'text']}

highlight_language = 'none'
